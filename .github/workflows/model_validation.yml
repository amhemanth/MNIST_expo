# Name of the workflow that appears in GitHub Actions tab
name: Model Requirements Validation

# Defines when the workflow will run
on: [push, pull_request]  # Triggers on both push events and pull requests

jobs:
  test:  # Job ID
    runs-on: ubuntu-latest  # Specifies the runner environment
    
    # Add permissions for writing to the workspace
    permissions:
      contents: write
    
    steps:
    # Step 1: Check out the repository code
    - uses: actions/checkout@v3  # Latest version of checkout action
    
    # Step 2: Set up Python environment with pip caching
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'  # Specify Python version
        cache: 'pip'  # Enable automatic caching of pip dependencies
        
    # Step 3: Install project dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip  # Upgrade pip
        pip install -r requirements.txt  # Install project requirements
        
    # Step 4: Prepare data directory
    - name: Create data directory
      run: |
        mkdir -p data
        
    # Step 5: Run architecture validation tests
    - name: Run Model Architecture Tests
      run: |
        echo "Running architecture validation tests..."
        # Run only architecture-related tests with verbose output
        python -m unittest test_model.py -k TestModelArchitecture -v
        
    # Step 6: Run performance validation tests
    - name: Run Model Performance Tests
      run: |
        echo "Running performance validation tests..."
        # Run only performance-related tests with verbose output
        python -m unittest test_model.py -k TestModelPerformance -v
        
    # Step 7: Perform static analysis of the model
    - name: Static Model Validation
      run: |
        # Execute Python code directly in the workflow
        python - <<EOF
        import torch
        from model import Net
        
        def validate_model():
            print("Starting static model validation...")
            model = Net()
            
            # 1. Parameter Count Check
            # Ensure model has less than 20k parameters
            param_count = sum(p.numel() for p in model.parameters())
            print(f"\nTotal parameters: {param_count:,}")
            assert param_count < 20000, f"Model has {param_count:,} parameters, exceeding limit of 20,000"
            print("✓ Parameter count is within limit")
            
            # 2. Architecture Components Check
            # Track presence of required components
            found_components = {
                'batch_norm': False,
                'dropout': False,
                'fc_or_gap': False
            }
            
            # Iterate through model layers to check for required components
            for module in model.modules():
                if isinstance(module, torch.nn.BatchNorm2d):
                    found_components['batch_norm'] = True
                elif isinstance(module, torch.nn.Dropout):
                    found_components['dropout'] = True
                elif isinstance(module, (torch.nn.Linear, torch.nn.AdaptiveAvgPool2d)):
                    found_components['fc_or_gap'] = True
            
            # Validate all required components are present
            assert found_components['batch_norm'], "Missing Batch Normalization"
            assert found_components['dropout'], "Missing Dropout"
            assert found_components['fc_or_gap'], "Missing FC layer or GAP"
            
            print("\nArchitecture Requirements:")
            print("✓ Has Batch Normalization")
            print("✓ Has Dropout")
            print("✓ Has FC layer or GAP")
            
            # 3. Basic Forward Pass Check
            # Verify model can process MNIST-shaped input
            x = torch.randn(1, 1, 28, 28)
            try:
                output = model(x)
                assert output.shape == (1, 10), f"Wrong output shape: {output.shape}"
                print("\n✓ Forward pass successful")
            except Exception as e:
                raise AssertionError(f"Forward pass failed: {str(e)}")
            
            print("\n✓ All validation checks passed!")
            return True
        
        if __name__ == "__main__":
            validate_model()
        EOF

    # Step 8: Generate a summary report of all tests
    # This step runs even if previous steps fail (if: always())
    - name: Generate Test Report
      if: always()
      run: |
        # Write test results to GitHub Actions summary
        echo "## Model Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "### Architecture Tests" >> $GITHUB_STEP_SUMMARY
        echo "✓ Parameter count" >> $GITHUB_STEP_SUMMARY
        echo "✓ Batch Normalization" >> $GITHUB_STEP_SUMMARY
        echo "✓ Dropout" >> $GITHUB_STEP_SUMMARY
        echo "✓ FC/GAP presence" >> $GITHUB_STEP_SUMMARY
        echo "### Performance Tests" >> $GITHUB_STEP_SUMMARY
        echo "✓ Model stability" >> $GITHUB_STEP_SUMMARY
        echo "✓ Inference speed" >> $GITHUB_STEP_SUMMARY
        echo "✓ Output validation" >> $GITHUB_STEP_SUMMARY 