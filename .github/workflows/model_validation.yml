name: Model Requirements Validation

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
        
    - name: Cache Python dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run Model Architecture Tests
      run: |
        echo "Running architecture validation tests..."
        python -m unittest test_model.py -k TestModelArchitecture -v
        
    - name: Run Model Performance Tests
      run: |
        echo "Running performance validation tests..."
        python -m unittest test_model.py -k TestModelPerformance -v
        
    - name: Static Model Validation
      run: |
        python - <<EOF
        import torch
        from model import Net
        
        def validate_model():
            print("Starting static model validation...")
            model = Net()
            
            # 1. Parameter Count Check
            param_count = sum(p.numel() for p in model.parameters())
            print(f"\nTotal parameters: {param_count:,}")
            assert param_count < 20000, f"Model has {param_count:,} parameters, exceeding limit of 20,000"
            print("✓ Parameter count is within limit")
            
            # 2. Architecture Components Check
            found_components = {
                'batch_norm': False,
                'dropout': False,
                'fc_or_gap': False
            }
            
            for module in model.modules():
                if isinstance(module, torch.nn.BatchNorm2d):
                    found_components['batch_norm'] = True
                elif isinstance(module, torch.nn.Dropout):
                    found_components['dropout'] = True
                elif isinstance(module, (torch.nn.Linear, torch.nn.AdaptiveAvgPool2d)):
                    found_components['fc_or_gap'] = True
            
            # Validate components
            assert found_components['batch_norm'], "Missing Batch Normalization"
            assert found_components['dropout'], "Missing Dropout"
            assert found_components['fc_or_gap'], "Missing FC layer or GAP"
            
            print("\nArchitecture Requirements:")
            print("✓ Has Batch Normalization")
            print("✓ Has Dropout")
            print("✓ Has FC layer or GAP")
            
            # 3. Basic Forward Pass Check
            x = torch.randn(1, 1, 28, 28)
            try:
                output = model(x)
                assert output.shape == (1, 10), f"Wrong output shape: {output.shape}"
                print("\n✓ Forward pass successful")
            except Exception as e:
                raise AssertionError(f"Forward pass failed: {str(e)}")
            
            print("\n✓ All validation checks passed!")
            return True
        
        if __name__ == "__main__":
            validate_model()
        EOF

    - name: Generate Test Report
      if: always()
      run: |
        echo "## Model Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "### Architecture Tests" >> $GITHUB_STEP_SUMMARY
        echo "✓ Parameter count" >> $GITHUB_STEP_SUMMARY
        echo "✓ Batch Normalization" >> $GITHUB_STEP_SUMMARY
        echo "✓ Dropout" >> $GITHUB_STEP_SUMMARY
        echo "✓ FC/GAP presence" >> $GITHUB_STEP_SUMMARY
        echo "### Performance Tests" >> $GITHUB_STEP_SUMMARY
        echo "✓ Model stability" >> $GITHUB_STEP_SUMMARY
        echo "✓ Inference speed" >> $GITHUB_STEP_SUMMARY
        echo "✓ Output validation" >> $GITHUB_STEP_SUMMARY 